# -*- coding=utf-8 -*-

__author__ = "Moniruzzaman Akash"
__version__ = "1.00"
__license__ = "GNU GPLv3"


from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import QtGui
import sys, os
import cv2
from ui_main import Ui_MainWindow # MAINWINDOW CODE GENERATED BY THE QT DESIGNER AND pyside2-uic.
from ui_dialog import Ui_Dialog # DIALOGBOX WINDOW GENERATED BY THE ABOVEW SAME
from ui_error import Ui_Error # ERRORBOX WINDOW GENERATED BY THE ABOVE SAME
from ui_function import * # A FILE WHERE ALL THE FUNCTION LIKE BUTTON PRESSES, SILDER, PROGRESS BAR E.T.C ARE DONE.
from about import *

class MainWindow(QMainWindow):
    def __init__(self, parent=None):

        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)


        #----> SET WINDOW TITLE AND ICON
        applicationName = "Polyp Detector"
        self.setWindowTitle(applicationName) #SETS THE APPLICATION NAME IN THE WINDOW TOPBAR                        ---------(C4)
        #EVENTHOW IT IS AVSENT THIS IS NECESSERY AS THE OPERATING SYSTEM RECOGNISES THE SOFTWARE SUING THIS NAME
        #SO YOU WILL SEE THE NAME ENTERED HERE IN THE TASKBAR, TITLEBAR, E.T.C
        UIFunction.labelTitle(self, applicationName) #PASSING THE CODE TO SET THE TITLE TO THE CUSTOME TOPBAR IN OUR UI
        #THIS UOFunction CLASS IS IN THE FILE: ui_function.py.
        ###############################


        #-----> INITIAL STACKED WIDGET PAGE WIDGET AND TAB
        #THIS MAKE THE INITIAL WINDOW OF OUR APPLICATION, I.E. THE FIRST PAGE OR THE WELCOME PAGE/SCREEN            ---------(C5)
        #IN OUR APPLICATION THIS IS THE MENU BAR, TOODLE SWITCH, MIN, MAX, CLOSE BUTTONS, AND THE HOME PAGE.
        #ALL THIS GET INITIALISED HERE.
        #SINCE ALL THE FUNCTION RELATED STUFF IS DONE IN THE ui_function.py FILE, IT GOES THERE
        #REMEMBER THIS FUNCTION CAN ALSO BE DONE HERE, BUT DUE TO CONVINENCE IT IS SHIFTD TO A NEW FILE.
        UIFunction.initStackTab(self)
        ############################################################

        
        #----> CERTAIN TOOLS LIKE DRAG, MAXIMISE, MINIMISE, CLOSE AND HIDING OF THE WINDOWS TOPBAR
        # THIS WINDOW INITIALISES THE BUTTONS NECESSERY FOR THE MAINWINDOW LIKE: CLOSE, MIN, MAX E.T.C.                ---------(C6)
        UIFunction.constantFunction(self)
        #############################################################


        #----> TOODLE THE MENU HERE
        #THIS CODE DETETS THE BUTTON IN THE RIGHT TOP IS PRESSED OR NOT AND IF PRESSED IT CONNECT  TO A FUNCTION IN THE ui_function.py                 ---------(C7)
        #FILE, WHICH EXPANDS THE MENU BAR TO DOUBLE ITS WIDTH MAKING ROOM FOR THE ABOUT PAGES.
        #THIS EFFECT CALLED AS TOODLE, CAN BE MADE USE IN MANY WAYS. CHECK THE FUNCTION: toodleMenu: IN THE ui_function.py
        #FILE FOR THE CLEAR WORKING
        self.ui.toodle.clicked.connect(lambda: UIFunction.toodleMenu(self, 160, True))
        #############################################################


        #----> MENU BUTTON PRESSED EVENTS
        #NOW SINCE OUR DEMO APPLICATION HAS ONLY 4 MENU BUTTONS: Home, Bug, Android, Cloud, WHEN USER PRESSES IT THE FOLLOWING CODE             ---------(C8)
        #REDIRECTS IT TO THE ui_function.py FILE buttonPressed() FUNCTION TO MAKE THE NECESSERY RESPONSES TO THE BUTTON PRESSED.
        #IT TAKES SELF AND THE BUTTON NAME AS THE RGUMENT, THIS IS ONLY TO RECOGNISE WHICH BUTTON IS PRESSED BY THE buttonPressed() FUNCTION.
        self.ui.bn_home.clicked.connect(lambda: UIFunction.buttonPressed(self, 'bn_home'))
        self.ui.bn_bug.clicked.connect(lambda: UIFunction.buttonPressed(self, 'bn_bug'))
        self.ui.bn_android.clicked.connect(lambda: UIFunction.buttonPressed(self, 'bn_android'))
        self.ui.bn_cloud.clicked.connect(lambda: UIFunction.buttonPressed(self, 'bn_cloud'))
        #############################################################


        #-----> STACK PAGE FUNCTION
        #OUR APPLICATION CHANGES THE PAGES BY USING THE STACKED WIDGET, THIS CODE POINTS TO A FUNCTION IN ui_function.py FILE             ---------(C9)
        #WHICH GOES AND SETS THE DEFAULT IN THESE PAGES AND SEARCHES FOR THE RESPONSES MADE BY THE USER IN THE CORRSPONDING PAGES.
        UIFunction.stackPage(self)



        self.dragPos = self.pos()
        def moveWindow(event):
            # IF MAXIMIZED CHANGE TO NORMAL
            if UIFunction.returStatus() == 1: 
                UIFunction.maximize_restore(self)

            # MOVE WINDOW
            if event.buttons() == Qt.LeftButton:
                self.move(self.pos() + event.globalPos() - self.dragPos)
                self.dragPos = event.globalPos()
                event.accept()

        # WIDGET TO MOVE: WE CHOOSE THE TOPMOST FRAME WHERE THE APPLICATION NAME IS PRESENT AS THE AREA TO MOVE THE WINDOW.
        self.ui.frame_appname.mouseMoveEvent = moveWindow  #CALLING THE FUNCTION TO CJANGE THE POSITION OF THE WINDOW DURING MOUSE DRAG
        

        #self.showFullScreen()
    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()
    #############################################################


    #-----> FUNCTION WHICH OPENS THE DIALOG AND DISPLAYS IT: SO TO CALL DIALOG BOX JUST CALL THE FUNCTION dialogexec() WITH ALL THE PARAMETER
    #NOW WHENEVER YOU WANT A DIALOG BOX TO APPEAR IN THE APP LIKE IN PRESS OF CLODE BUTTON, THIS CAN BE DONE BY CALLING THIS FUNCTION.        ----------(C11)
    #IT TAKES DIALOG OBJECT(INITIALISED EARLIER), HEADER NAME OF DIALOG BOX, MESSAGE TO BE DISPLAYED, ICON, BUTTON NAMES.
    #THIS CODE EXECUTES THE DIALOGBOX AND SO WE CAN SEE THE DIALOG BOX IN THE SCREEN.
    #DURING THE APPEARENCE OF THIS WINDOW, YOU CANNOT USE THE MAINWINDOW, YOU SHPULD EITHER PRESS ANY ONE OFT HE PROVIDED BUTTONS
    #OR JUST CLODE THE DIALOG BOX.
    def dialogexec(self, heading, message, icon, btn1, btn2):
        dialogUi.dialogConstrict(self.diag, heading, message, icon, btn1, btn2)
        self.diag.exec_()
    #############################################################


    #-----> FUNCTION WHICH OPENS THE ERROR BOX AND DISPLAYS IT: SO TO CALL DIALOG BOX JUST CALL THE FUNCTION errorexec() WITH ALL THE PARAMETER
    #SAME AS COMMEND (C11), EXCEPT THIS IS FOR THE ERROR BOX.
    def errorexec(self, heading, icon, btnOk):
        errorUi.errorConstrict(self.error, heading, icon, btnOk)
        self.error.exec_()

    # def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
    #     painter = QPainter(self)
    #     pixmap = QPixmap("images/polyp.png")
    #     painter.drawPixmap(self.rect(), pixmap)

        

    def gotoImageDetect(self):
        # self.cams = Window1(self.lineEdit1.text())
        self.cams = Window1('Hi')
        self.cams.show()
        self.close()
    # action method
    def gotoLiveDetect(self):
        self.cams = Window2("self.lineEdit1.text()")
        self.cams.show()
        self.close()





class Window1(QDialog):
    def __init__(self, value= None, parent=None):
        super().__init__(parent)
        self.setWindowTitle('Window1')
        self.setWindowIcon(self.style().standardIcon(QStyle.SP_TitleBarNormalButton))

        self.originalPalette = QApplication.palette()
        
        
        self.options = ('Light', 'Heavy')
        self.combo = QComboBox()
        self.combo.setFixedSize(250,40)
        #self.combo.setFont(QFont('calibri', 12))
        self.combo.addItems(self.options)

        label = QLabel("&Detection Mode:")
        label.setBuddy(self.combo)


        topLayout  = QVBoxLayout()
        topLayout.addWidget(label)
        topLayout.addWidget(self.combo)

        self.topGroupBox = QGroupBox("")
        self.topGroupBox.setLayout(topLayout)

        
        suggestBiopsy = QCheckBox("&Suggest Biopsy")
        suggestBiopsy.toggled.connect(self.topGroupBox.setDisabled)

        leftLayout  = QVBoxLayout()
        leftLayout.addSpacing(150)
        leftLayout.addWidget(self.topGroupBox)
        leftLayout.addSpacing(30)
        leftLayout.addWidget(suggestBiopsy)
        leftLayout.addStretch(1)

        widget2 = QLabel("")

        layout = QHBoxLayout()
        layout.addLayout(leftLayout)
        layout.addWidget(widget2)
        layout.addWidget(widget2)
        layout.addWidget(widget2)
        layout.addWidget(widget2)
        self.setLayout(layout)




        selectBtn = QPushButton("Select File", self)
        selectBtn.setGeometry(50, 320, 200, 50)# setting geometry of button
        selectBtn.setFont(QFont('Times', 15))
        #selectBtn.setStyleSheet("border-radius : 2;");
        selectBtn.clicked.connect(self.treatSelectedFile)# adding action to a button

        homeBtn = QPushButton("Home", self)
        homeBtn.setGeometry(50, 390, 200, 50)# setting geometry of button
        selectBtn.setFont(QFont('Times', 15))
        homeBtn.clicked.connect(self.goMainWindow)# adding action to a button


        # pixmap = QPixmap(self.res_location)
        # self.imgLabel.setPixmap(pixmap)



        

        closeBtn = QPushButton(self)
        closeBtn.setGeometry(1280, 30, 50, 48)
        closeBtn.setStyleSheet("border-image : url(images/close50.png);")
        closeBtn.clicked.connect(QCoreApplication.instance().quit)
        self.showFullScreen()
        #self.showMaximized()

    def treatSelectedFile(self):
        # option = self.options.index(self.combo.currentText())
        option = self.combo.currentText()
        response = self.getFilename()
        print(response)
        print(option)

    def getFilename(self):
        response = QFileDialog.getOpenFileName(
            parent=self,
            caption='Select image or video',
            directory=os.getcwd(),
            filter='Images (*.png, *.jpg)'
        )
        return response[0]


    def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
        painter = QPainter(self)
        pixmap = QPixmap("images/select_page.png")
        painter.drawPixmap(self.rect(), pixmap)
    def goMainWindow(self):
        self.cams = MainWindow()
        self.cams.show()
        self.close() 
        
    
class Window2(QDialog):
    def __init__(self, value=None, parent=None):
        super().__init__(parent)
        self.setWindowTitle('Window2')
        self.setWindowIcon(self.style().standardIcon(QStyle.SP_TitleBarNormalButton))
        

        self.res_location = 'images/stop.png'
        startBtn = QPushButton("Start", self)
        startBtn.setGeometry(50, 260, 200, 50)# setting geometry of button
        startBtn.setIcon(QIcon('images/start.png'))
        startBtn.setIconSize(QSize(40, 40))
        startBtn.setFont(QFont('Times', 15))
        startBtn.clicked.connect(self.startLive)# adding action to a button

        stopBtn = QPushButton("Stop", self)
        stopBtn.setGeometry(50, 330, 200, 50)
        stopBtn.setIcon(QIcon('images/stop.png'))
        stopBtn.setIconSize(QSize(40, 40))
        stopBtn.setFont(QFont('Times', 15))
        stopBtn.clicked.connect(self.stopLive)

        homeBtn = QPushButton("Home", self)
        homeBtn.setGeometry(50, 400, 200, 50)
        homeBtn.setFont(QFont('Times', 15))
        homeBtn.clicked.connect(self.goMainWindow)

        closeBtn = QPushButton(self)
        closeBtn.setGeometry(1280, 30, 50, 48)
        closeBtn.setStyleSheet("border-image : url(images/close50.png);")
        closeBtn.clicked.connect(QCoreApplication.instance().quit)
        

        self.imgLabel = QLabel(self)
        self.imgLabel.setGeometry(550, 105, 640, 480)

        self.showMaximized()

    def update_frame(self):
        ret, self.image = self.capture.read()
        #print(type(self.image))

        self.displayImage(self.image)

    def displayImage(self, image, window=1):
        """
        :param image: frame from camera
        :param window: number of window
        :return:
        """

        try:
            image = cv2.resize(image, (640, 480), interpolation=cv2.INTER_AREA)
        except:
            print("No cam feed!")
            return

        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        outImage = outImage.rgbSwapped()
        #outImage = image
        if window == 1:
            self.imgLabel.setPixmap(QPixmap.fromImage(outImage))
            #self.imgLabel.setScaledContents(True)
            print("Done")
        
        
    def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
        painter = QPainter(self)
        pixmap = QPixmap("images/select_page.png")
        painter.drawPixmap(self.rect(), pixmap)
    
    def startLive(self):
        self.capture = cv2.VideoCapture(0)
        self.timer = QTimer(self)  # Create Timer
        self.timer.timeout.connect(self.update_frame)  # Connect timeout to the output function
        self.timer.start(40)  # emit the timeout() signal at x=40ms

    def stopLive(self):
        print("Stop!")
        self.timer.stop()
        self.capture.release()
        cv2.destroyAllWindows()
        

    def goMainWindow(self):
        try:
            self.timer.stop()
        except:
            pass
        self.cams = MainWindow()
        self.cams.show()
        self.close()



if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

